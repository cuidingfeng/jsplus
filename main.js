
/*!
 * JsPlus v0.0.1 (https://github.com/cuidingfeng/jsplus/)
 * Copyright 2015 cuidingfeng, Inc.
 * Licensed under MIT (https://github.com/cuidingfeng/jsplus/blob/master/LICENSE)
 * Email: admin@baiketupu.com
 * Generated by CoffeeScript 1.7.1
 */

(function() {
  'use strict';

  /*
   * JsPlus的定位是一个JavaScript库，目标是提供一系列简化JavaScript操作的基础方法，让开发专注于业务逻辑。
   */
  var P, conversion, formatArr, getArr, getFnFormat, getNums, getParam, getType, log, regs,
    __modulo = function(a, b) { return (a % b + +b) % b; };

  P = function() {};

  P.debug = true;

  regs = {
    number: /^[+-]?[1-9][0-9]*(\.[0-9]+)?([eE][+-][1-9][0-9]*)?$|^[+-]?0?\.[0-9]+([eE][+-][1-9][0-9]*)?$/,
    lowercase: /^[a-z]$/,
    uppercase: /^[A-Z]$/,
    numberCn: /^[零一二三四五六七八九十百千万亿]+$/
  };

  conversion = {
    number: {
      getnum: function(s) {
        return Number(s);
      },
      getstr: function(n) {
        return n;
      }
    },
    lowercase: {
      getnum: function(s) {
        return s.charCodeAt(0) - 97;
      },
      getstr: function(n) {
        return String.fromCharCode(n + 97);
      }
    },
    uppercase: {
      getnum: function(s) {
        return s.charCodeAt(0) - 65;
      },
      getstr: function(n) {
        return String.fromCharCode(n + 65);
      }
    },
    numberCn: {
      getnum: function(s) {
        return P.cn2num(s);
      },
      getstr: function(n) {
        return P.num2cn(n);
      }
    }
  };

  log = function(str) {
    if (P.debug) {
      return ((this.console != null) && (console.log != null) ? console.log : alert)("JS-Plus:" + str);
    }
  };

  getFnFormat = function(fn) {
    if (typeof fn === 'function') {
      return fn;
    } else {
      return function(index, $1) {
        return fn.replace('$1', $1).replace('$index', index);
      };
    }
  };

  getParam = function(str) {
    var fn, ss, tp1;
    if (str == null) {
      str = '';
    }
    ss = str.split(":");
    if (ss.length < 2) {
      log('数列格式错误，请至少包括一个":"，否则原样返回');
      return [str, 0, null, -1];
    } else {
      if (ss.length === 2) {
        ss[2] = ss[1];
        ss[1] = null;
      } else {
        ss[1] = parseFloat(ss[1]);
        if (!ss[1]) {
          log('数列递增字符格式不正确，必须为数字');
          ss[1] = 0;
          tp1 = -1;
        }
      }
      tp1 = getType(ss[0]);
      if (tp1 !== getType(ss[2])) {
        log('数列起始值和结束值类型不一致');
        ss[1] = 0;
        tp1 = -1;
      }
      if (tp1 === -1) {
        log('数列格式暂时不支持');
        ss[1] = 0;
      } else {
        fn = conversion[['number', 'lowercase', 'uppercase', 'numberCn'][tp1]].getnum;
        ss[0] = fn(ss[0]);
        ss[2] = fn(ss[2]);
        if (ss[1] === null) {
          ss[1] = ss[0] < ss[2] ? 1 : -1;
        } else if (ss[1] !== 0 && (ss[0] < ss[2] ? 1 : -1) * ss[1] < 0) {
          log('数列递增数字正负符号不正确，无法从起始值递增到结束值');
          ss[1] = 0;
        }
      }
      return [ss[0], ss[1], ss[2], tp1];
    }
  };

  getType = function(s) {
    if (regs.number.test(s)) {
      return 0;
    }
    if (regs.lowercase.test(s)) {
      return 1;
    }
    if (regs.uppercase.test(s)) {
      return 2;
    }
    if (regs.numberCn.test(s)) {
      return 3;
    }
    return -1;
  };

  getNums = function(param) {
    var i, reArr;
    reArr = [];
    if (param[1] === 0 || param[3] === -1) {
      if (param[0] != null) {
        reArr.push(param[0]);
      }
      if (param[2] != null) {
        reArr.push(param[2]);
      }
    } else {
      i = param[0];
      while (i <= param[2] && param[1] > 0 || i >= param[2] && param[1] < 0) {
        reArr.push(i);
        i += param[1];
      }
    }
    return reArr;
  };

  getArr = function(nums, tp) {
    var fn, i, num, _i, _len;
    if (tp !== -1) {
      fn = conversion[['number', 'lowercase', 'uppercase', 'numberCn'][tp]].getstr;
      for (i = _i = 0, _len = nums.length; _i < _len; i = ++_i) {
        num = nums[i];
        nums[i] = fn(num);
      }
    }
    return nums;
  };

  formatArr = function(arr, cb) {
    var i, li, _i, _len;
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      li = arr[i];
      arr[i] = cb(i, li);
    }
    return arr;
  };


  /*
   *========================================
   * 静态对象对外提供的方法
   * arr:    按指定规则生成一个一维数组
   * cn2num: 把中文数字转换为数值
   * num2cn: 把自然数转换为中文数字
   * assign: 按条件返回值
   * inArr:  按条件查找数组
   * forArr: 按条件处理数组的每一项
   *========================================
   */

  P.arr = function() {
    var arg, fn, narr, nums, param, str, strs, _i, _len;
    arg = Array.prototype.slice.call(arguments, 0);
    str = arg[0];
    if ((str == null) || typeof str !== 'string') {
      return [];
    }
    narr = [];
    fn = getFnFormat(arg[1] || function(index, $1) {
      return $1;
    });
    strs = str.split(/\s*,\s*/);
    for (_i = 0, _len = strs.length; _i < _len; _i++) {
      str = strs[_i];
      param = getParam(str);
      nums = getNums(param);
      narr = narr.concat(getArr(nums, param[3]));
    }
    return formatArr(narr, fn);
  };

  P.cn2num = function(cn) {
    var endNum, nB, nQ, nS, nW, nY;
    endNum = function(s, e) {
      if (/^[一二三四五六七八九]$/.test(s)) {
        return P.cn2num(s) * e;
      } else {
        return P.cn2num(s.replace(/^零+/g, ''));
      }
    };
    if (typeof cn !== 'string') {
      log('中文数字转换参数类型不是String');
      return 0;
    }
    if (cn === '') {
      return 0;
    }
    if (!regs.numberCn.test(cn)) {
      log('中文数字转换格式不正确');
      return 0;
    }
    nY = cn.split('亿');
    if (nY.length > 2) {
      log('中文数字转换最大支持单位为千万亿');
      return 0;
    } else if (nY.length === 2) {
      return P.cn2num(nY[0]) * 1e8 + endNum(nY[1], 1e7);
    } else {
      nW = cn.split('万');
      if (nW.length > 2) {
        log('中文数字转换格式不正确，不能同时包含两个万字');
        return 0;
      } else if (nW.length === 2) {
        return P.cn2num(nW[0]) * 1e4 + endNum(nW[1], 1e3);
      } else {
        nQ = cn.split('千');
        if (nQ.length > 2) {
          log('中文数字转换格式不正确，不能同时包含两个千字');
          return 0;
        } else if (nQ.length === 2) {
          return P.cn2num(nQ[0]) * 1e3 + endNum(nQ[1], 1e2);
        } else {
          nB = cn.split('百');
          if (nB.length > 2) {
            log('中文数字转换格式不正确，不能同时包含两个百字');
            return 0;
          } else if (nB.length === 2) {
            return P.cn2num(nB[0]) * 1e2 + endNum(nB[1], 1e1);
          } else {
            nS = cn.split('十');
            if (nS.length > 2) {
              log('中文数字转换格式不正确，不能同时包含两个十字');
              return 0;
            } else if (nS.length === 2) {
              return P.cn2num(nS[0] || '一') * 1e1 + endNum(nS[1], 1);
            } else {
              return '一二三四五六七八九'.indexOf(cn) + 1;
            }
          }
        }
      }
    }
  };

  P.num2cn = function(n, no0) {
    var i, karr, marr, sY, splitNum, xGs, _i, _len;
    if (typeof n !== 'number') {
      log('数字换中文参数错误，必须为数字');
      return n + '';
    }
    if (n < 0 || n % 1 > 0) {
      log('数字换中文只支持自然数');
      return n + '';
    }
    if (n === 0) {
      if (no0) {
        return '';
      } else {
        return '零';
      }
    }
    splitNum = function(n, s) {
      return [Math.floor(n / s), __modulo(n, s), s];
    };
    karr = [['亿', 1e8], ['万', 1e4], ['千', 1e3], ['百', 1e2], ['十', 1e1]];
    for (i = _i = 0, _len = karr.length; _i < _len; i = ++_i) {
      marr = karr[i];
      sY = splitNum(n, marr[1]);
      if (sY[0] > 0) {
        return P.num2cn(sY[0], true) + marr[0] + (sY[1] < sY[2] / 10 && sY[1] > 0 ? '零' : '') + P.num2cn(sY[1], true);
      } else if (i === _len - 1) {
        xGs = '一二三四五六七八九'.split('');
        xGs.unshift('');
        return xGs[sY[1]];
      }
    }
  };

  P.assign = function(vals) {
    var val, _i, _len;
    if (!(vals instanceof Array)) {
      log('参数类型错误，期望是Array');
      return null;
    }
    for (_i = 0, _len = vals.length; _i < _len; _i++) {
      val = vals[_i];
      if (!(val instanceof Array)) {
        return val;
      }
      if (val.length === 1 || val.length > 1 && val[1]) {
        return val[0];
      }
    }
    log('无匹配的值');
    return null;
  };

  P.inArr = function(arr, fn, reVal) {
    var ali, fnstr, i, _i, _len;
    if (!(arr instanceof Array)) {
      log('参数类型错误，期望是Array');
      return null;
    }
    if (!(fn instanceof Function)) {
      fnstr = fn;
      fn = function(index, $1, size) {
        var _fnstr;
        _fnstr = fnstr.replace("$index", index).replace("$1", $1).replace("$size", size);
        return (new Function("return " + _fnstr))();
      };
    }
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      ali = arr[i];
      if (fn(i, ali, _len)) {
        if (reVal) {
          return ali;
        } else {
          return true;
        }
      }
    }
    if (reVal) {
      return void 0;
    } else {
      return false;
    }
  };

  P.forArr = function(arr, fn, old) {
    var ali, fnstr, i, nVal, newArr, _i, _len;
    if (!(arr instanceof Array)) {
      log('参数类型错误，期望是Array');
      return null;
    }
    newArr = [];
    if (!(fn instanceof Function)) {
      fnstr = fn;
      fn = function(index, $1, size) {
        var _fnstr;
        _fnstr = fnstr.replace("$index", index).replace("$1", $1).replace("$size", size);
        return (new Function("return " + _fnstr))();
      };
    }
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      ali = arr[i];
      nVal = fn(i, ali, _len);
      newArr.push(nVal);
      if (old) {
        arr[i] = nVal;
      }
    }
    return newArr;
  };

  if ("function" === typeof require && "object" === typeof module && module && module.id && "object" === typeof exports && exports) {
    module.exports = P;
  } else if ("function" === typeof define && define.amd) {
    define('jsplus', [], function() {
      return P;
    });
    define(function() {
      return P;
    });
  } else {
    this.P = P;
  }

}).call(this);

//# sourceMappingURL=main.map